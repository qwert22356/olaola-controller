{
  "name": "Network_deploy_v0.8_step2_getLLDP_networkdeploy_devices",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/networkdeploy/getlldp",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1920,
        540
      ],
      "id": "f2ee169c-1742-464c-a9b1-93854ac93a2d",
      "name": "Webhook",
      "webhookId": "44b778a1-baf3-4c08-8940-da488f750265"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "networkdeploy_devices",
          "mode": "list",
          "cachedResultName": "networkdeploy_devices"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ip_address": "={{ $json.ip_address }}",
            "lldp_neighbors": "={{ $json.lldp_neighbors }}",
            "updated_at": "2025-06-01T16:38:06"
          },
          "matchingColumns": [
            "ip_address"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ip_address",
              "displayName": "ip_address",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "hostname",
              "displayName": "hostname",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "if_number",
              "displayName": "if_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "lldp_neighbors",
              "displayName": "lldp_neighbors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "discovered_at",
              "displayName": "discovered_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "first_seen",
              "displayName": "first_seen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "snmp_module",
              "displayName": "snmp_module",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "vendor_sw",
              "displayName": "vendor_sw",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "vendor_hw",
              "displayName": "vendor_hw",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "hw_sku",
              "displayName": "hw_sku",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        840
      ],
      "id": "8d48f18f-a626-4e42-9159-97d5cd84738e",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "EzSF61njyrocgFwV",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.body.devices || [];\n\nreturn input.map(d => ({\n  json: {\n    ip_address: d.ip_address\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1720,
        540
      ],
      "id": "3359e739-89e9-4f43-bed2-217cc5ae3a4d",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const results = [];\n\nfor (const item of $input.all()) {\nlet ip_address = item.json[\"ip_address\"] || \"unknown\";\nif (ip_address === \"unknown\") {\n  const match = (item.json[\"stdout\"] || \"\").match(/DEVICE:\\s+([\\d\\.]+)/);\n  if (match) ip_address = match[1];\n}\n  const raw = item.json[\"stdout\"] || \"\";\n  const lines = raw.split(\"\\n\");\n\n  const locPorts = {};\n  const remSysNames = {};\n  const remPortIds = {};\n  const remPortDescs = {};\n\n  for (const line of lines) {\n    const match = line.match(/iso\\.0\\.8802\\.1\\.1\\.2\\.1\\.([\\d\\.]+)\\s+=\\s+STRING:\\s+\"?(.*?)\"?$/);\n    if (!match) continue;\n\n    const oid = match[1];\n    const value = match[2];\n\n    const parts = oid.split(\".\");\n    const key = parts.slice(0, 4).join(\".\");\n    const index = parts.slice(4).join(\".\");\n\n    switch (key) {\n      case \"3.7.1.3\": locPorts[index] = value; break;\n      case \"4.1.1.9\": remSysNames[index] = value; break;\n      case \"4.1.1.7\": remPortIds[index] = value; break;\n      case \"4.1.1.8\": remPortDescs[index] = value; break;\n    }\n  }\n\n  const neighbors = Object.keys(locPorts).map(index => ({\n    local_port: locPorts[index],\n    remote_device: remSysNames[index] || \"unknown\",\n    remote_port: remPortIds[index] || \"unknown\",\n    remote_port_descr: remPortDescs[index] || \"unknown\"\n  }));\n\n  results.push({\n    json: {\n      ip_address,\n      lldp_neighbors: JSON.stringify(neighbors),  // PostgreSQL text 字段\n      updated_at: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        760
      ],
      "id": "88b650b9-0785-4048-a0b3-cfb3880beeb4",
      "name": "json_format"
    },
    {
      "parameters": {
        "content": "## Get_lldp",
        "height": 440,
        "width": 2300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2040,
        440
      ],
      "id": "76c9347a-e67d-40d0-9437-8442ed1922dd",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  status: $json.status || \"success\",\n  count: $items().length,\n  message: $json.message || null,\n  data: $items().map(item => item.json)\n}) }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        520,
        840
      ],
      "id": "15d1f97a-2083-4f7e-872f-a93c380c34a9",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ba7996f9-8c17-41a6-a29f-95f59ee04c8e",
              "name": "ip_address",
              "value": "={{ $json.ip_address }}",
              "type": "string"
            },
            {
              "id": "f7b2fbf6-beea-4150-be94-6e38562f61bc",
              "name": "hostname",
              "value": "={{ $json.hostname }}",
              "type": "string"
            },
            {
              "id": "ece1cc17-50c8-4f08-ad23-ee3651f03737",
              "name": "lldp_neighbors",
              "value": "={{ $json.lldp_neighbors }}",
              "type": "string"
            },
            {
              "id": "bfa64eb9-1486-4578-861d-868c0905c3f3",
              "name": "hw_sku",
              "value": "={{ $json.hw_sku }}",
              "type": "string"
            },
            {
              "id": "da799444-acbb-4c02-8533-2a6682e6ab1a",
              "name": "vendor_hw",
              "value": "={{ $json.vendor_hw }}",
              "type": "string"
            },
            {
              "id": "d9ca3917-da7c-4961-a538-a99d41337590",
              "name": "vendor_sw",
              "value": "={{ $json.vendor_sw }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        840
      ],
      "id": "62352e53-a91b-49c3-b4f7-0b31fc068ca7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2929eb14-8137-4a42-b41b-4df9903dae68",
              "leftValue": "={{ $json.vendor_sw }}",
              "rightValue": "SONiC.4.4.",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "edde5ce5-4efc-417d-86a7-38b2a3a66ff1",
              "leftValue": "={{ $json.vendor_sw }}",
              "rightValue": "SONiC.20",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1300,
        740
      ],
      "id": "045330b8-6322-4560-9ab9-9915ed2404cd",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "networkdeploy_devices",
        "filters": {
          "conditions": [
            {
              "keyName": "ip_address",
              "condition": "eq",
              "keyValue": "={{ $json.ip_address }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1480,
        740
      ],
      "id": "54b1e4aa-696c-479d-ae2b-0bd35f44b9d7",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "u1dPtQhZKTFreuwz",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const results = [];\n\nfor (const item of $input.all()) {\nlet ip_address = item.json[\"ip_address\"] || \"unknown\";\nif (ip_address === \"unknown\") {\n  const match = (item.json[\"stdout\"] || \"\").match(/DEVICE:\\s+([\\d\\.]+)/);\n  if (match) ip_address = match[1];\n}\n  let raw = item.json[\"stdout\"] || \"\";\n\n  // 🧼 清洗误换行：合并被拆开的接口行（例如 Ethernet0\\nEthernet1）\n  raw = raw.replace(/(Ethernet\\d+)\\n(Ethernet\\d+)/g, \"$1 $2\");\n\n  const lines = raw.split(\"\\n\");\n\n  const neighbors = [];\n  let start = false;\n\n  for (const line of lines) {\n    const trimmed = line.trim();\n\n    // 跳过标题行和空行\n    if (trimmed.startsWith(\"LocalPort\") || trimmed.startsWith(\"-----\")) {\n      start = true;\n      continue;\n    }\n\n    if (!start || trimmed === \"\" || trimmed.startsWith(\"Total entries\")) continue;\n\n    // 完整5列（有RemotePortDescr）\n    const match = trimmed.match(/^(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+\\S+\\s+(.+)$/);\n    if (match) {\n      neighbors.push({\n        local_port: match[1],\n        remote_device: match[2],\n        remote_port: match[3],\n        remote_port_descr: match[4].trim() || \"unknown\"\n      });\n    } else {\n      // 回退：只有前4列，没有 remote_port_descr\n      const fallback = trimmed.match(/^(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+\\S+$/);\n      if (fallback) {\n        neighbors.push({\n          local_port: fallback[1],\n          remote_device: fallback[2],\n          remote_port: fallback[3],\n          remote_port_descr: \"unknown\"\n        });\n      }\n    }\n  }\n\n  results.push({\n    json: {\n      ip_address,\n      lldp_neighbors: JSON.stringify(neighbors),\n      updated_at: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        320
      ],
      "id": "88202f8a-06f9-417a-9c04-3d735884688b",
      "name": "json_format2"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=echo \"=== DEVICE: {{ $json.ip_address }} ===\"\ntimeout 10s sshpass -p '{{ $json.password }}' ssh -o StrictHostKeyChecking=no {{ $json.username }}@{{ $json.ip_address }} 'show lldp table' \\\n|| echo \"❌ Failed to connect or timed out.\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -580,
        320
      ],
      "id": "bcbaa111-20ae-4f39-94f5-fd04318acd3b",
      "name": "Execute Command3"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=echo \"=== DEVICE: {{ $json.ip_address }} ===\"\ntimeout 10s snmpwalk -v2c -c public {{ $json.ip_address }} .1.0.8802.1.1.2.1.3.7.1.3\ntimeout 10s snmpwalk -v2c -c public {{ $json.ip_address }} .1.0.8802.1.1.2.1.4.1.1.9\ntimeout 10s snmpwalk -v2c -c public {{ $json.ip_address }} .1.0.8802.1.1.2.1.4.1.1.7\ntimeout 10s snmpwalk -v2c -c public {{ $json.ip_address }} .1.0.8802.1.1.2.1.4.1.1.8 \\\n|| echo \"❌ SNMP timed out\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -700,
        760
      ],
      "id": "9e85aaf8-db66-4c20-bd92-d8bebb4237f8",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -20,
        600
      ],
      "id": "7fc587ab-15dd-4d30-99d7-cb85fa84614b",
      "name": "Merge"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -740,
        320
      ],
      "id": "70326ad9-4026-4234-8c2f-cbe4c7d07a36",
      "name": "Merge1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "639f3e2b-7b36-46f9-b289-76672db25c67",
              "leftValue": "={{ $json.vendor_sw }}",
              "rightValue": "SONiC.4.4.",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1100,
        540
      ],
      "id": "60586e59-3095-4c09-9b15-6a893390acc3",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -740,
        540
      ],
      "id": "93c06eb4-d2f5-4c9d-b092-698df83715a6",
      "name": "Merge2"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=echo \"=== DEVICE: {{ $json.ip_address }} ===\"\ntimeout 10s sshpass -p '{{ $json.password }}' ssh -o StrictHostKeyChecking=no {{ $json.username }}@{{ $json.ip_address }} 'show lldp table' \\\n|| echo \"❌ Failed to connect or timed out.\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -560,
        540
      ],
      "id": "807a120c-6918-4cbc-be3a-fb3e7a6baf02",
      "name": "Execute Command4"
    },
    {
      "parameters": {
        "jsCode": "const results = [];\n\nfor (const item of $input.all()) {\n  let ip_address = item.json[\"ip_address\"] || \"unknown\";\n\n  // 从 stdout 中提取 IP\n  if (ip_address === \"unknown\") {\n    const match = (item.json[\"stdout\"] || \"\").match(/DEVICE:\\s+([\\d\\.]+)/);\n    if (match) ip_address = match[1];\n  }\n\n  const raw = item.json[\"stdout\"] || \"\";\n  const lines = raw.split(\"\\n\");\n  const neighbors = [];\n\n  let parsing = false;\n\n  for (const line of lines) {\n    const trimmed = line.trim();\n\n    // 检查是否到达表格数据部分\n    if (trimmed.startsWith(\"LocalPort\")) {\n      parsing = true;\n      continue;\n    }\n\n    if (!parsing || trimmed === \"\" || trimmed.startsWith(\"----\") || trimmed.startsWith(\"Total\")) {\n      continue;\n    }\n\n    // 使用严格的 5 列字段匹配\n    const match = trimmed.match(/^(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(.+)$/);\n    if (match) {\n      neighbors.push({\n        local_port: match[1],\n        remote_device: match[2],\n        remote_port: match[3],\n        capability: match[4],\n        remote_port_descr: match[5]\n      });\n    }\n  }\n\n  results.push({\n    json: {\n      ip_address,\n      lldp_neighbors: JSON.stringify(neighbors),\n      updated_at: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -340,
        540
      ],
      "id": "81964703-56da-41a0-b18c-5961e7466089",
      "name": "Code3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT ip_address, username, password\nFROM public.networkdeploy_devices_config_cli\nWHERE ip_address = '{{ $json.ip_address }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -920,
        540
      ],
      "id": "757dabde-5000-4dc4-a2e8-ada1cdedab6a",
      "name": "Check Passwd",
      "credentials": {
        "postgres": {
          "id": "EzSF61njyrocgFwV",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT ip_address, username, password\nFROM public.networkdeploy_devices_config_cli\nWHERE ip_address = '{{ $json.ip_address }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -920,
        320
      ],
      "id": "f93dd364-def3-4f61-83ba-6e15df0927ff",
      "name": "Check Passwd1",
      "credentials": {
        "postgres": {
          "id": "EzSF61njyrocgFwV",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const cleaned = [];\n\nfor (const item of $input.all()) {\n  const neighborsRaw = item.json.lldp_neighbors;\n  \n  let neighbors = [];\n  try {\n    neighbors = JSON.parse(neighborsRaw);\n  } catch (e) {\n    neighbors = [];\n  }\n\n  // 过滤掉任何字段是 \"unknown\" 的项\n  const filtered = neighbors.filter(n => \n    n.local_port !== \"unknown\" &&\n    n.remote_port !== \"unknown\"\n  );\n\n  if (filtered.length === 0) {\n    cleaned.push({\n      json: {\n        ip_address: item.json.ip_address,\n        message: \"无邻居\"\n      }\n    });\n  } else {\n    cleaned.push({\n      json: {\n        ip_address: item.json.ip_address,\n        neighbors: filtered\n      }\n    });\n  }\n}\n\nreturn cleaned;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        840
      ],
      "id": "26d7ef1e-861c-47f7-aede-79b9d787cf38",
      "name": "filter unknownlldp"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "json_format": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "filter unknownlldp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "json_format2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command3": {
      "main": [
        [
          {
            "node": "json_format2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "json_format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Execute Command3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Check Passwd1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Passwd",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Execute Command4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command4": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Check Passwd": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Passwd1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter unknownlldp": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e4f920c4-d4e9-4498-89da-11b6ff742704",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3c4f8b2c2b4d02cf4fc2cfa5c4b6a1500ac4c1c82a34628dc509dca968f8700d"
  },
  "id": "PPyIkL8PA7nrPKQ3",
  "tags": []
}